{"name":"Io-js","tagline":"Javscript IO library for IoT device, companion device and development host","body":"# IOT IO Library\r\n\r\nA unified Javascript IO library for IOT device([Galileo](http://www.intel.com/content/www/us/en/intelligent-systems/galileo/galileo-overview.html)/Edison), companion device(phone/tablet) and XDK. \r\n\r\n## Components\r\n\r\nIt is consisted of\r\n\r\n* Two libraries: iot-io, iot-io-companion\r\n* A server: iot-io-server\r\n* An automation tool: autogen\r\n\r\n### iot-io\r\n\r\nA Javascript based IO library which provides Arduino like APIs. \r\n\r\nThe target execution environment is IOT devices including Galileo and Edison\r\n\r\n### iot-io-companion\r\n\r\nRemotely call iot-io built-in Arduino like functions and user-defined functions. The function call will be translated to a JSON-RPC request and the iot-io-server will receive the request then call iot-io library natively. \r\n\r\nThe target execution environment is companion devices including phone/tablet/pc/etc. This library runs in Nodejs or Browser.\r\n \r\n### iot-io-server\r\n\r\nA RPC server. It can expose iot-io APIs and user defined functions to remote companion devices. \r\n\r\nBasiclly the target execution environment is IOT device.\r\n\r\n### autogen\r\n\r\nA Python tool is used to generate the main skeleton of iot-io/iot-io-companion/iot-io-server. If user want to add more C/C++ functions to these software stack he can use it to read standard .h files then the new iot-io/iot-io-companion/iot-io-server will be generated.  \r\n\r\n## Prebuild\r\n\r\nIf you only want to build some components, please go to the corresponding directory and read the README. \r\n\r\n* Please follow the document [Intel Galileo Getting Started](https://communities.intel.com/docs/DOC-22796) to install Yocto on Galileo and boot your board from a SD card\r\n\r\n* Install node-gyp\r\n```shell\r\nsudo npm install -g node-gyp\r\n```\r\n* Install cross compiler\r\n\r\n  - The Galileo Arduino IDE has contained a cross compiler, please download the Linux version from https://communities.intel.com/docs/DOC-22226 to your host Linux machine\r\n \r\n  - Edit target/device/set_cross_compiler.sh and set `ARDUINO_PATH` to the right path\r\n  \r\n  - run the script to set environment values\r\n```shell\r\n    source target/device/set_cross_compiler.sh\r\n```\r\n\r\n* Optionally install uglify for compressing and mangling \r\n```shell\r\nsudo npm install uglify-js\r\n```\r\n\r\n* Optionally install jsdoc for document generation\r\n```shell\r\nsudo npm install -g jsdoc\r\n```\r\n## Build\r\n\r\nBuild it with gmake\r\n```shell\r\nmake\r\n```\r\nbut make will not download all dependent nodejs modules, then we suggest you to use npm\r\n```shell\r\nnpm install\r\n```\r\n\r\n## Quick Start\r\n\r\n\r\n### Control IO with Javascript on IOT device\r\n\r\nWith iot-io you can develop the program with Javascript to control IO. The API is Arduino like and easy to understand.\r\n\r\nFor example we can turn on a LED by below file\r\n```javascript\r\nvar IOLIB = require('iot-io');\r\nvar io = new IOLIB.IO({\r\n  log: true\r\n});\r\n\r\nio.pinMode(13, io.OUTPUT);\r\nio.digitalWrite(13, io.HIGH);\r\n```\r\n\r\nOr you can use high level APIs which have hidden some hardware details. For above example, you can use API of `Led`\r\n```javascript\r\nvar IOLIB = require('iot-io');\r\nvar io = new IOLIB.IO({\r\n  log: true\r\n});\r\n\r\nvar led = new IOLIB.Led({\r\n  io: io,\r\n  pin: 13\r\n});\r\n\r\nled.on();\r\n```\r\n\r\n### Remote IO Control \r\n\r\nWe can use all of iot-io APIs as RPC(Remote Procdure call) functions with iot-io-companion. The below code can remotely turn on the LED from another PC. The only difference to above example is we must set extra options to tell where is remote RPC server. Then save below codes to file `led_rpc.js` on remote PC. \r\n\r\n```javascript\r\nvar IOLIB = (typeof require === 'function') ?\r\n            require('iot-io-companion'): this.IOLIB;\r\n\r\nvar io = new IOLIB.IO({\r\n  log: true,\r\n  rpc: true,  // turn on rpc call\r\n  port: 2000, // port of RPC server\r\n  hostname: '192.168.2.11', //address or machine name of RPC server\r\n});\r\n\r\nvar led = new IOLIB.Led({\r\n  io: io,\r\n  pin: 13\r\n});\r\n\r\nled.on();\r\n```\r\n\r\nOn IOT device please install iot-io-server.\r\n```shell\r\nnpm install -g iot-io-server\r\n```\r\n\r\nRun the RPC server on IOT device\r\n```shell\r\niot-io-server\r\n```\r\n\r\nBack to your remote PC. Now you can run led_rpc.js and it will turn on the IOT device's LED remotely.\r\n```shell\r\nnode led_rpc.js\r\n```\r\n\r\n### Run in Browser\r\n\r\nThe remote control codes can run in browser & nodejs. Because our library is based on jQuery, please load jQuery firstly. You can create a HTML file `index.html` and put it in the directory in which `led_rpc.js` is.\r\n\r\n```html\r\n<script src = 'http://code.jquery.com/jquery-1.11.0.min.js'> </script>\r\n<script src = './iot-io-browser-general.js'></script>\r\n<script src = './led_rpc.js'></script>\r\n```\r\n\r\nThen you can open `led.html` in browser and led will be turned on\r\n\r\n### Pack it to Mobile APP\r\n\r\nThe above HTML page can be packed to an Android/iOS/WP/Tizen/... application with [Intel XDK](http://xdk-software.intel.com/). You can create a project in XDK and import above index.html with libraries. You can also debug the application with XDK.\r\n\r\n### Expose user defined function\r\n\r\nThe iot-io-server can not only expose built-in APIs but also user defined functions. \r\n\r\nPrepare the file which contains expose candidate. Suppose it is called `extra.js`. User defined functions are saved in variable `RPC`. A global variable `isRpcServer` can help determine whether this file is opened  by iot-io-server.\r\n\r\n```javascript\r\nvar Foo = function(s) {\r\n  console.log('hello ' + s);\r\n};\r\n\r\nif(isRpcServer) {\r\n  exports.RPC = {\r\n    'myFun': Foo\r\n  };\r\n}\r\n```\r\n\r\nLoad it with `iot-io-server`\r\n```shell\r\niot-io-server extra.js\r\n```\r\n\r\nThe client side can use exposed function `myFun` in nodejs or browser.\r\n\r\n```javascript\r\nvar IOLIB = (typeof require === 'function') ? \r\n            require('iot-io-companion'): this.IOLIB;\r\n\r\nvar io = new IOLIB.IO({\r\n  rpc: true,\r\n  port: 2000,\r\n  hostname: 'localhost',\r\n});\r\n\r\nio.addRpc('myFun');\r\n\r\nmyFun('world'); //will output 'hello world'\r\n```\r\n\r\n### Add C/C++ function with autogen\r\n\r\nSuppose user has a new function in my_print.cpp\r\n\r\n```c\r\nvoid myPrint(char *s) {\r\n  printf(\"hello %s\\n\", s);\r\n}\r\n```\r\n\r\nIn my_print.h the function myPrint is declared as extern\r\n```c\r\nextern void myPrint(char *s);\r\n```\r\n\r\nGo to target/device/libio and put these two files under src, then add .cpp file to libio.gyp\r\n\r\n```javascript\r\n      'extra_srcs' : [\r\n        '<(extra_dir)/my_print.cpp',\r\n      ],\r\n\r\n```\r\n\r\nadd .h file to export.gyp\r\n\r\n```javascript\r\n      'export_headers' : [\r\n        '<(extra_dir)/my_print.h',\r\n      ],\r\n```\r\n\r\nFinally go to the root directory and rebuild all of library\r\n\r\n```shell\r\ncd io-js\r\nmake\r\n```\r\n\r\n## Test\r\n\r\n* Test functionality with [buster.js](http://busterjs.org/)\r\n\r\n```shell\r\nmake test\r\n```\r\n\r\n* Test autogen parser\r\n\r\n```shell\r\n./test_autogen\r\n```\r\n\r\n## Directories\r\n\r\n| Directory            | Description |\r\n|:---------------------|:------------|\r\n| /target/device       | iot-io |\r\n| /target/device/libio | Arduino library |\r\n| /target/companion    | iot-io-companion |\r\n| /target/server       | iot-io-server |\r\n| /target/extension    | high level APIs for iot-io & iot-io-companion |\r\n| /util/autogen        | autogen tool |\r\n| /doc                 |documents. This directory will be created by jsdoc |\r\n\r\n## Licese\r\n\r\nAll of components use the BSD license  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}