// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'undefined' ? null : require;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"io-js": {
		"target": {
			"common": {
				"led.js": function (exports, module, require) {
					(function(exports, global) {
					/////////////////////////////////////////////


					/*
					 * Main LED constructor
					 */
					var Led = function (options) {
					  if (options === undefined || options.io === undefined)
					    throw new Error('Must supply required options to LED');
					  this.io = options.io;
					  this.pin = options.pin || 0;
					  this.bright = 0;
					  this.io.pinMode(this.pin, this.io.OUTPUT);
					  this.direction = -1;
					}

					/*
					 * Turn the LED on
					 */
					Led.prototype.on = function () {
					  this.io.digitalWrite(this.pin, this.io.HIGH);
					  this.bright = 255;
					}

					/*
					 * Turn the LED off
					 */
					Led.prototype.off = function () {
					  this.io.digitalWrite(this.pin, this.io.LOW);
					  this.bright = 0;
					}

					Led.prototype.brightLevel = function(val) {
					  this.io.analogWrite(this.pin, this.bright = val);
					}

					Led.prototype.fade = function(interval) {
					  to = (interval || 5000) / (255 * 2);
					  var self = this;
					  setInterval(function() {
					    if(self.bright == 0) direction = 1;
					    if(self.bright == 255) direction = -1;
					    self.brightLevel(self.bright + direction);
					  }, to);
					}

					/*
					 * Start a bariable blinking pattern
					 */
					Led.prototype.blink = function (interval) {
					  interval = interval || 1000;
					  var self = this;
					  setInterval(function(){
					    if (self.bright) {
					      self.off()
					    } else {
					      self.on();
					    }
					  }, interval);
					}

					exports.Led = Led;

					/////////////////////////////////////////////
					})(typeof exports === 'object'? exports: this, this );
				}
			}
		}
	}
})("io-js/target/common/led");
